buildscript {
    repositories {
        jcenter() 
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:3.1.1'
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.4.5'
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
    }
}

plugins {
	id 'org.springframework.boot' version '3.1.1'
	id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'com.google.cloud.tools.jib' version '3.3.2'
    id 'org.podval.tools.cloudrun' version '0.3.7'
}

repositories { 
    mavenCentral() 
}

dependencies {
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.1'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.1.1'
    implementation 'org.springframework.cloud:spring-cloud-gcp-starter-logging:1.2.8.RELEASE'
    implementation 'com.google.cloud:google-cloud-core:2.21.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.springframework.cloud:spring-cloud-gcp-starter:1.2.8.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:3.1.1'
    implementation 'org.springframework.boot:spring-boot-starter-security:3.1.1'
}


tasks {
    jib {
        from {
            image = "eclipse-temurin:17-jre"
        }
        to {
            image = "gcr.io/<GCP_PROJECT_ID>/<REPO_NAME>"
            auth {
                username = "_json_key"
                password = file("google.key").text
            }
        }
    }
}

cloudRun {
  region = 'us-east1'                                     // required
  serviceYamlFilePath = "$rootDir/service.yaml"     // optional
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
}

jar {
    manifest({
        attributes 'Main-Class': 'com.cloudrun.microservicetemplate.MicroserviceTemplateApplication'
    })
}